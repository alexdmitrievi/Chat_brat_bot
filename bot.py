
import os
import logging
import asyncio
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand
from aiogram.utils import executor

API_TOKEN = os.getenv("BOT_TOKEN")
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

catalog = {
    "—Ç–æ–º–∞—Ç—ã": ("0702 00 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–æ–≥—É—Ä—Ü—ã": ("0707 00 190 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": ("0701 90 500 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ª—É–∫": ("0703 10 190 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—á–µ—Å–Ω–æ–∫": ("0703 20 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∫–∞–ø—É—Å—Ç–∞": ("0704 90 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–±—Ä–æ–∫–∫–æ–ª–∏": ("0704 10 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–º–æ—Ä–∫–æ–≤—å": ("0706 10 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Å–≤–µ–∫–ª–∞": ("0706 20 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Ä–µ–¥–∏—Å": ("0706 90 900 2", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ø–µ—Ç—Ä—É—à–∫–∞": ("0706 90 900 1", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—É–∫—Ä–æ–ø": ("0706 90 900 3", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—à–ø–∏–Ω–∞—Ç": ("0710 30 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∫–∞–±–∞—á–∫–∏": ("0709 90 900 1", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–±–∞–∫–ª–∞–∂–∞–Ω—ã": ("0709 30 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ø–µ—Ä–µ—Ü": ("0709 60 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—è–±–ª–æ–∫–∏": ("0808 10 800 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–≥—Ä—É—à–∏": ("0808 30 900 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∞–±—Ä–∏–∫–æ—Å—ã": ("0809 10 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—á–µ—Ä–µ—à–Ω—è": ("0809 29 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ø–µ—Ä—Å–∏–∫–∏": ("0809 30 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Å–ª–∏–≤—ã": ("0809 40 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–Ω–µ–∫—Ç–∞—Ä–∏–Ω—ã": ("0809 30 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–≥—Ä–∞–Ω–∞—Ç—ã": ("0810 90 500 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Ö—É—Ä–º–∞": ("0810 70 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–≤–∏–Ω–æ–≥—Ä–∞–¥": ("0806 10 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–º–∞–Ω–¥–∞—Ä–∏–Ω—ã": ("0805 20 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∞–ø–µ–ª—å—Å–∏–Ω—ã": ("0805 10 200 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ª–∏–º–æ–Ω—ã": ("0805 50 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–±–∞–Ω–∞–Ω—ã": ("0803 90 100 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "–∫–∏–≤–∏": ("0810 50 000 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "—Ñ–∏–Ω–∏–∫–∏": ("0804 10 000 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "–∏–Ω–∂–∏—Ä": ("0804 20 100 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "–∞—Ä–±—É–∑—ã": ("0807 11 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–¥—ã–Ω–∏": ("0807 19 000 0", "–ù—É–∂–Ω–∞", "–î–∞")
}

user_states = {}

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    await bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"),
        BotCommand("cancel", "–°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é")
    ])

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_states[message.from_user.id] = {
        "step": "product",
        "current": {},
        "positions": [],
        "invoice_number": "",
        "invoice_date": "",
        "cmr_number": "",
        "cmr_date": ""
    }
    await set_menu()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–±–µ—Ä—ë–º –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é. –ù–∞–ø–∏—à–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ç–æ–º–∞—Ç—ã'):")

@dp.message_handler(lambda msg: msg.from_user.id in user_states)
async def handle_input(message: types.Message):
    state = user_states[message.from_user.id]
    step = state["step"]
    text = message.text.strip().lower()

    if step == "product":
        if text not in catalog:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        tnved, trts, st1 = catalog[text]
        state["current"] = {
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": text,
            "–ö–æ–¥ –¢–ù –í–≠–î": tnved,
            "–¢–† –¢–°": trts,
            "–°–¢-1": st1,
            "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
            "–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
            "–ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è": "–î–∞",
            "–°—Ç–∞–≤–∫–∞ –ù–î–° (%)": 10
        }
        state["step"] = "netto"
        await message.answer("–í–≤–µ–¥–∏ –≤–µ—Å –Ω–µ—Ç—Ç–æ (–≤ –∫–≥):")

    elif step == "netto":
        try:
            state["current"]["–í–µ—Å –Ω–µ—Ç—Ç–æ (–∫–≥)"] = float(text.replace(",", "."))
            state["step"] = "brutto"
            await message.answer("–í–≤–µ–¥–∏ –≤–µ—Å –±—Ä—É—Ç—Ç–æ (–≤ –∫–≥):")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 350.5")

    elif step == "brutto":
        try:
            state["current"]["–í–µ—Å –±—Ä—É—Ç—Ç–æ (–∫–≥)"] = float(text.replace(",", "."))
            state["step"] = "places"
            await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 360")

    elif step == "places":
        try:
            state["current"]["–ö–æ–ª-–≤–æ –º–µ—Å—Ç"] = int(text)
            state["step"] = "price"
            await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞ –∫–≥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.85):")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20")

    elif step == "price":
        try:
            price = float(text.replace(",", "."))
            current = state["current"]
            current["–¶–µ–Ω–∞ –∑–∞ –∫–≥ ($)"] = price
            current["–°—É–º–º–∞ ($)"] = round(current["–í–µ—Å –Ω–µ—Ç—Ç–æ (–∫–≥)"] * price, 2)
            state["positions"].append(current)
            state["current"] = {}
            state["step"] = "add_more"
            await message.answer("‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä? (–¥–∞/–Ω–µ—Ç)")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.25")

    elif step == "add_more":
        if text in ["–¥–∞", "yes", "–¥"]:
            state["step"] = "product"
            await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        elif text in ["–Ω–µ—Ç", "no", "–Ω"]:
            state["step"] = "invoice_number"
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞:")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

    elif step == "invoice_number":
        state["invoice_number"] = text
        state["step"] = "invoice_date"
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏–Ω–≤–æ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025):")

    elif step == "invoice_date":
        state["invoice_date"] = text
        state["step"] = "cmr_number"
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä CMR:")

    elif step == "cmr_number":
        state["cmr_number"] = text
        state["step"] = "cmr_date"
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É CMR (–Ω–∞–ø—Ä–∏–º–µ—Ä: 02.05.2025):")

    elif step == "cmr_date":
        state["cmr_date"] = text
        df = pd.DataFrame(state["positions"])
        df["–ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞"] = state["invoice_number"]
        df["–î–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞"] = state["invoice_date"]
        df["–ù–æ–º–µ—Ä CMR"] = state["cmr_number"]
        df["–î–∞—Ç–∞ CMR"] = state["cmr_date"]
        file_path = f"declaration_{message.from_user.id}.xlsx"
        df.to_excel(file_path, index=False)
        await message.answer_document(types.InputFile(file_path), caption="üìÑ –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
        del user_states[message.from_user.id]

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(set_menu())
    executor.start_polling(dp, skip_updates=True)

