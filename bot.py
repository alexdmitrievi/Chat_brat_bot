import os
import logging
import json
import asyncio
import pandas as pd
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook

# Webhook config for Render
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL", "https://your-service.onrender.com")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 8080))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

STATE_FILE = "user_states.json"

def load_states():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_states(states):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(states, f, ensure_ascii=False, indent=2)

user_states = load_states()

catalog = {
    "—Ç–æ–º–∞—Ç—ã": ("0702 00 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–æ–≥—É—Ä—Ü—ã": ("0707 00 190 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": ("0701 90 500 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ª—É–∫": ("0703 10 190 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—á–µ—Å–Ω–æ–∫": ("0703 20 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∫–∞–ø—É—Å—Ç–∞": ("0704 90 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–±—Ä–æ–∫–∫–æ–ª–∏": ("0704 10 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–º–æ—Ä–∫–æ–≤—å": ("0706 10 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Å–≤–µ–∫–ª–∞": ("0706 20 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Ä–µ–¥–∏—Å": ("0706 90 900 2", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ø–µ—Ç—Ä—É—à–∫–∞": ("0706 90 900 1", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—É–∫—Ä–æ–ø": ("0706 90 900 3", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—à–ø–∏–Ω–∞—Ç": ("0710 30 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∫–∞–±–∞—á–∫–∏": ("0709 90 900 1", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–±–∞–∫–ª–∞–∂–∞–Ω—ã": ("0709 30 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ø–µ—Ä–µ—Ü": ("0709 60 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—è–±–ª–æ–∫–∏": ("0808 10 800 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–≥—Ä—É—à–∏": ("0808 30 900 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∞–±—Ä–∏–∫–æ—Å—ã": ("0809 10 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—á–µ—Ä–µ—à–Ω—è": ("0809 29 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ø–µ—Ä—Å–∏–∫–∏": ("0809 30 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Å–ª–∏–≤—ã": ("0809 40 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–Ω–µ–∫—Ç–∞—Ä–∏–Ω—ã": ("0809 30 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–≥—Ä–∞–Ω–∞—Ç—ã": ("0810 90 500 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "—Ö—É—Ä–º–∞": ("0810 70 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–≤–∏–Ω–æ–≥—Ä–∞–¥": ("0806 10 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–º–∞–Ω–¥–∞—Ä–∏–Ω—ã": ("0805 20 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–∞–ø–µ–ª—å—Å–∏–Ω—ã": ("0805 10 200 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–ª–∏–º–æ–Ω—ã": ("0805 50 100 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–±–∞–Ω–∞–Ω—ã": ("0803 90 100 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "–∫–∏–≤–∏": ("0810 50 000 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "—Ñ–∏–Ω–∏–∫–∏": ("0804 10 000 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "–∏–Ω–∂–∏—Ä": ("0804 20 100 0", "–ù—É–∂–Ω–∞", "–ù–µ—Ç"),
    "–∞—Ä–±—É–∑—ã": ("0807 11 000 0", "–ù—É–∂–Ω–∞", "–î–∞"),
    "–¥—ã–Ω–∏": ("0807 19 000 0", "–ù—É–∂–Ω–∞", "–î–∞")
}

def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    uid = str(message.from_user.id)
    user_states[uid] = {
        "step": "product",
        "current": {},
        "positions": []
    }
    save_states(user_states)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ç–æ–º').")

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å Excel-–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é –¥–ª—è –ê–ª—å—Ç–∞-–ì–¢–î.\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/cancel ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é."
    )

@dp.message_handler(commands=["cancel"])
async def cmd_cancel(message: types.Message):
    user_states.pop(str(message.from_user.id), None)
    save_states(user_states)
    await message.answer("‚ùå –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.message_handler(lambda msg: msg.text and msg.text.lower() in ["–¥–∞", "–Ω–µ—Ç"])
async def yes_no_handler(message: types.Message):
    uid = str(message.from_user.id)
    state = user_states.get(uid, {})
    if state.get("step") == "add_more":
        if message.text.lower() == "–¥–∞":
            state["step"] = "product"
            save_states(user_states)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        else:
            state["step"] = "invoice_number"
            save_states(user_states)
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞:")

@dp.message_handler(lambda msg: msg.text)
async def handle_input(message: types.Message):
    uid = str(message.from_user.id)
    state = user_states.get(uid, {})
    step = state.get("step")
    text = message.text.strip().lower()

    if step == "product":
        matches = [k for k in catalog if text in k]
        if not matches:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        if len(matches) == 1:
            name = matches[0]
            tnved, trts, st1 = catalog[name]
            state["current"] = {
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": name,
                "–ö–æ–¥ –¢–ù –í–≠–î": tnved,
                "–¢–† –¢–°": trts,
                "–°–¢-1": st1,
                "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
                "–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
                "–ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è": "–î–∞",
                "–°—Ç–∞–≤–∫–∞ –ù–î–° (%)": 10
            }
            state["step"] = "netto"
            save_states(user_states)
            await message.answer("–í–≤–µ–¥–∏ –≤–µ—Å –Ω–µ—Ç—Ç–æ (–≤ –∫–≥):")
        else:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            for name in matches:
                markup.add(KeyboardButton(name))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)

    elif step == "netto":
        try:
            state["current"]["–í–µ—Å –Ω–µ—Ç—Ç–æ (–∫–≥)"] = float(text.replace(",", "."))
            state["step"] = "brutto"
            save_states(user_states)
            await message.answer("–í–≤–µ–¥–∏ –≤–µ—Å –±—Ä—É—Ç—Ç–æ (–≤ –∫–≥):")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 350.5")

    elif step == "brutto":
        try:
            state["current"]["–í–µ—Å –±—Ä—É—Ç—Ç–æ (–∫–≥)"] = float(text.replace(",", "."))
            state["step"] = "places"
            save_states(user_states)
            await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 360")

    elif step == "places":
        try:
            state["current"]["–ö–æ–ª-–≤–æ –º–µ—Å—Ç"] = int(text)
            state["step"] = "price"
            save_states(user_states)
            await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞ –∫–≥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.85):")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20")

    elif step == "price":
        try:
            price = float(text.replace(",", "."))
            current = state["current"]
            current["–¶–µ–Ω–∞ –∑–∞ –∫–≥ ($)"] = price
            current["–°—É–º–º–∞ ($)"] = round(current["–í–µ—Å –Ω–µ—Ç—Ç–æ (–∫–≥)"] * price, 2)
            state["positions"].append(current)
            state["current"] = {}
            state["step"] = "add_more"
            save_states(user_states)
            await message.answer("‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä? (–¥–∞/–Ω–µ—Ç)")
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.25")

    elif step == "invoice_number":
        state["invoice_number"] = message.text.strip()
        state["step"] = "invoice_date"
        save_states(user_states)
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏–Ω–≤–æ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025):")

    elif step == "invoice_date":
        if not is_valid_date(text):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 01.05.2025")
            return
        state["invoice_date"] = text
        state["step"] = "cmr_number"
        save_states(user_states)
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä CMR:")

    elif step == "cmr_number":
        state["cmr_number"] = message.text.strip()
        state["step"] = "cmr_date"
        save_states(user_states)
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É CMR (–Ω–∞–ø—Ä–∏–º–µ—Ä: 02.05.2025):")

    elif step == "cmr_date":
        if not is_valid_date(text):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 02.05.2025")
            return
        state["cmr_date"] = text
        df = pd.DataFrame(state["positions"])
        df["–ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞"] = state["invoice_number"]
        df["–î–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞"] = state["invoice_date"]
        df["–ù–æ–º–µ—Ä CMR"] = state["cmr_number"]
        df["–î–∞—Ç–∞ CMR"] = state["cmr_date"]
        file_path = f"declaration_{uid}.xlsx"
        df.to_excel(file_path, index=False)
        await message.answer_document(types.InputFile(file_path), caption="üìÑ –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
        user_states.pop(uid, None)
        save_states(user_states)

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    await bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"),
        BotCommand("cancel", "–°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é")
    ])
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Webhook")

async def on_shutdown(dp):
    await bot.delete_webhook()
    logging.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

